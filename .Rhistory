genomewideline = -log10(5e-8))  # Genome-wide significance
# Generate QQ plot
qq(gwas_results$P,
main = "QQ Plot for GWAS Results")
# Load data
allele_freqs <- read.table("second_gwas_attempt/allele_freqs.frq.strat", header = TRUE, stringsAsFactors = FALSE)
# Separate data into groups
group1 <- subset(allele_freqs, CLST == 1)  # High phenotype group
group2 <- subset(allele_freqs, CLST == 2)  # Low phenotype group
# Merge the two groups by SNP for comparison
maf_comparison <- merge(group1[, c("SNP", "MAF")], group2[, c("SNP", "MAF")],
by = "SNP", suffixes = c("_low", "_high"))
# Load data
allele_freqs <- read.table("second_gwas_attempt/allele_freqs.frq.strat", header = TRUE, stringsAsFactors = FALSE)
# Separate data into groups
group1 <- subset(allele_freqs, CLST == 1)  # High phenotype group
group2 <- subset(allele_freqs, CLST == 2)  # Low phenotype group
# Merge the two groups by SNP for comparison
maf_comparison <- merge(group1[, c("SNP", "MAF")], group2[, c("SNP", "MAF")],
by = "SNP", suffixes = c("_low", "_high"))
# Scatter plot of MAF
plot(maf_comparison$MAF_low, maf_comparison$MAF_high,
xlab = "MAF in Low Phenotype Group",
ylab = "MAF in High Phenotype Group",
main = "Comparison of Minor Allele Frequencies",
col = "blue", pch = 16)
# Add a reference line (x = y) for comparison
abline(0, 1, col = "red", lty = 2)
# Select relevant columns
allele_freqs_subset <- allele_freqs[, c("SNP", "CLST", "MAF")]
# Rename the columns for clarity
colnames(allele_freqs_subset) <- c("SNP", "Group", "MAF")
# Ensure the Group column is treated as a factor
allele_freqs_subset$Group <- as.factor(allele_freqs_subset$Group)
# Select relevant columns
allele_freqs_subset <- allele_freqs[, c("SNP", "CLST", "MAF")]
# Rename the columns for clarity
colnames(allele_freqs_subset) <- c("SNP", "Group", "MAF")
# Ensure the Group column is treated as a factor
allele_freqs_subset$Group <- as.factor(allele_freqs_subset$Group)
# Box plot
boxplot(MAF ~ Group, data = allele_freqs_subset,
names = c("Low Phenotype Group", "High Phenotype Group"),
col = c("blue", "orange"),
main = "Distribution of Minor Allele Frequency by Group",
xlab = "Phenotype Group",
ylab = "Minor Allele Frequency (MAF)")
knitr::opts_chunk$set(echo = TRUE)
str(storms_update)
# Step 1: Import the library
library(dplyr)
# Step 2: Bring up the dataset
# storms is the Atlantic hurricane season. It has winds of 39 mph or greater
# storms can be grouped into separate types based on where they are in the ocean (subtropical, tropical, and extratropical)
head(storms)
str(storms)
#write.csv(storms, "storms.csv")
# Step 3: Generate a new variable which groups tropical storms (only examine storms with measured `tropicalstorm_force_diameter` in the original `storms` dataset) into three categories.
# storms_update <- storms %>%
#   filter(!is.na(storms$tropicalstorm_force_diameter))
storms_update <- storms %>%
mutate(Tropical_Storms = case_when(                                        # ?case_when()
status == "tropical storm" ~ "tropical",                                 # status: Storm classification (Tropical Depression, Tropical Storm, or Hurricane)
status == "subtropical storm" ~ "subtropical",
status == "extratropical" ~ "extratropical"))
head(storms_update)
storms_update <- storms_update%>%
filter(!is.na(storms_update$Tropical_Storms))
head(storms_update)
str(storms_update)
#write.csv(storms_update, "storms_update.csv")
str(storms_update)
x<-summary(aov(storms_update$tropicalstorm_force_diameter ~ storms_update$Tropical_Storms))
#Kruskal-Wallis one-way ANOVA method for comparing k independent samples
kruskal.test(storms_update$tropicalstorm_force_diameter ~ storms_update$Tropical_Storms)
# Load necessary libraries
library(dplyr)
library(kableExtra)
install.packages("kableExtra")
#Kruskal-Wallis one-way ANOVA method for comparing k independent samples
kruskal.test(storms_update$tropicalstorm_force_diameter ~ storms_update$Tropical_Storms)
# Load necessary libraries
library(dplyr)
library(kableExtra)
# Perform the Kruskal-Wallis test
kruskal_result <- kruskal.test(storms_update$tropicalstorm_force_diameter ~ storms_update$Tropical_Storms)
# Extract the test statistic and p-value
test_statistic <- kruskal_result$statistic
p_value <- kruskal_result$p.value
# Create a summary statistics table
summary_table <- data.frame(
Statistic = test_statistic,
`p-value` = sprintf("%.6f", p_value)  # Preserve p-value without rounding
)
# Add the title
summary_table_title <- "Kruskal-Wallis Test Summary"
# Create a nicely formatted table
summary_table %>%
kable(caption = summary_table_title) %>%
kable_styling()
#perform ANOVA test
#remember: we have to get the average wind diameters for those three storm categories
aov(storms_update$tropicalstorm_force_diameter ~ storms_update$Tropical_Storms)
#get the summary stats of the ANOVA test
summary(aov(storms_update$tropicalstorm_force_diameter ~ storms_update$Tropical_Storms))
x<-summary(aov(storms_update$tropicalstorm_force_diameter ~ storms_update$Tropical_Storms))
library()
#Kruskal-Wallis one-way ANOVA method for comparing k independent samples
kruskal.test(storms_update$tropicalstorm_force_diameter ~ storms_update$Tropical_Storms)
# Load necessary libraries
library(dplyr)
library(kableExtra)
# Perform the Kruskal-Wallis test
kruskal_result <- kruskal.test(storms_update$tropicalstorm_force_diameter ~ storms_update$Tropical_Storms)
# Extract the test statistic and p-value
test_statistic <- kruskal_result$statistic
p_value <- kruskal_result$p.value
# Create a summary statistics table
summary_table <- data.frame(
Statistic = test_statistic,
`p-value` = sprintf("%.6f", p_value)  # Preserve p-value without rounding
)
# Add the title
summary_table_title <- "Kruskal-Wallis Test Summary"
# Create a nicely formatted table
summary_table %>%
kable(caption = summary_table_title) %>%
kable_styling()
# Step 1: Import the library
library(dplyr)
# Step 2: Bring up the dataset
# storms is the Atlantic hurricane season. It has winds of 39 mph or greater
# storms can be grouped into separate types based on where they are in the ocean (subtropical, tropical, and extratropical)
head(storms)
str(storms)
#write.csv(storms, "storms.csv")
# Step 3: Generate a new variable which groups tropical storms (only examine storms with measured `tropicalstorm_force_diameter` in the original `storms` dataset) into three categories.
# storms_update <- storms %>%
#   filter(!is.na(storms$tropicalstorm_force_diameter))
storms_update <- storms %>%
mutate(Tropical_Storms = case_when(                                        # ?case_when()
status == "tropical storm" ~ "tropical",                                 # status: Storm classification (Tropical Depression, Tropical Storm, or Hurricane)
status == "subtropical storm" ~ "subtropical",
status == "extratropical" ~ "extratropical"))
head(storms_update)
storms_update <- storms_update%>%
filter(!is.na(storms_update$Tropical_Storms))
head(storms_update)
str(storms_update)
#write.csv(storms_update, "storms_update.csv")
storms_update <- storms %>%
mutate(Tropical_Storms = case_when(                                        # ?case_when()
status == "tropical storm" ~ "tropical",                                 # status: Storm classification (Tropical Depression, Tropical Storm, or Hurricane)
status == "subtropical storm" ~ "subtropical",
status == "extratropical" ~ "extratropical"))
head(storms_update)
storms_update <- storms_update%>%
filter(!is.na(storms_update$Tropical_Storms))
storms_update <- storms %>%
mutate(Tropical_Storms = case_when(                                        # ?case_when()
status == "tropical storm" ~ "tropical",                                 # status: Storm classification (Tropical Depression, Tropical Storm, or Hurricane)
status == "subtropical storm" ~ "subtropical",
status == "extratropical" ~ "extratropical"))
head(storms_update)
storms_update <- storms_update%>%
filter(!is.na(storms_update$Tropical_Storms))
head(storms_update)
storms_update1 <- storms %>%
mutate(Tropical_Storms = case_when(                                        # ?case_when()
status == "tropical storm" ~ "tropical",                                 # status: Storm classification (Tropical Depression, Tropical Storm, or Hurricane)
status == "subtropical storm" ~ "subtropical",
status == "extratropical" ~ "extratropical"))
head(storms_update1)
storms_update2 <- storms_update%>%
filter(!is.na(storms_update$Tropical_Storms))
head(storms_update2)
str(storms_update2)
str(storms_update2)
head(storms_update2)
#perform ANOVA test
#remember: we have to get the average wind diameters for those three storm categories
aov(storms_update$tropicalstorm_force_diameter ~ storms_update$Tropical_Storms)
#get the summary stats of the ANOVA test
summary(aov(storms_update$tropicalstorm_force_diameter ~ storms_update$Tropical_Storms))
x<-summary(aov(storms_update$tropicalstorm_force_diameter ~ storms_update$Tropical_Storms))
library()
aov(storms_update$tropicalstorm_force_diameter ~ storms_update$Tropical_Storms)
#get the summary stats of the ANOVA test
summary(aov(storms_update$tropicalstorm_force_diameter ~ storms_update$Tropical_Storms))
#get the summary stats of the ANOVA test
summary(aov(storms_update$tropicalstorm_force_diameter ~ factor(storms_update$Tropical_Storms)))
#get the summary stats of the ANOVA test
summary(aov(storms_update$tropicalstorm_force_diameter ~ storms_update$Tropical_Storms))
#perform ANOVA test
#remember: we have to get the average wind diameters for those three storm categories
aov(storms_update2$tropicalstorm_force_diameter ~ storms_update2$Tropical_Storms)
#get the summary stats of the ANOVA test
summary(aov(storms_update2$tropicalstorm_force_diameter ~ storms_update2$Tropical_Storms))
#get the summary stats of the ANOVA test
summary(aov(storms_update2$tropicalstorm_force_diameter ~ storms_update2$Tropical_Storms))
write.csv(storms_update2, "storms_update2.csv")
# Step 1: Import the library
library(dplyr)
# Step 2: Bring up the dataset
# storms is the Atlantic hurricane season. It has winds of 39 mph or greater
# storms can be grouped into separate types based on where they are in the ocean (subtropical, tropical, and extratropical)
head(storms)
str(storms)
#write.csv(storms, "storms.csv")
# Step 3: Generate a new variable which groups tropical storms (only examine storms with measured `tropicalstorm_force_diameter` in the original `storms` dataset) into three categories.
# storms_update <- storms %>%
#   filter(!is.na(storms$tropicalstorm_force_diameter))
storms_update1 <- storms %>%
mutate(Tropical_Storms = case_when(                                        # ?case_when()
status == "tropical storm" ~ "tropical",                                 # status: Storm classification (Tropical Depression, Tropical Storm, or Hurricane)
status == "subtropical storm" ~ "subtropical",
status == "extratropical" ~ "extratropical"))
head(storms_update1)
storms_update2 <- storms_update%>%
filter(!is.na(storms_update$Tropical_Storms))%>%
filter(!is.na(storms_update$tropicalstorm_force_diameter))
head(storms_update2)
str(storms_update2)
#write.csv(storms_update2, "storms_update2.csv")
#get the summary stats of the ANOVA test
summary(aov(storms_update2$tropicalstorm_force_diameter ~ storms_update2$Tropical_Storms))
boxplot(storms_update2$tropicalstorm_force_diameter ~ storms_update2$Tropical_Storms
, data = storms_update2,
ylab = "tropicalstorm_force_diameter", xlab = "Tropical_Storms")
#add sample means into the box plots
boxplot(storms_update2$tropicalstorm_force_diameter ~ storms_update2$Tropical_Storms
, data = storms_update2,
ylab = "tropicalstorm_force_diameter", xlab = "Tropical_Storms")
whisk.means = aggregate(storms_update2$tropicalstorm_force_diameter ~ storms_update2$Tropical_Storms, mean, data = storms_update2)
points(1:3, whisk.means$Score, pch = 4)
#VALIDATE ANOVA TEST
validate_res = aov(storms_update2$tropicalstorm_force_diameter ~ storms_update2$Tropical_Storms)
qqnorm(resid(validate_res))
#VALIDATE ANOVA TEST
validate_res = aov(storms_update2$tropicalstorm_force_diameter ~ storms_update2$Tropical_Storms)
#qqnorm(resid(validate_res))
par(mfrow=c(2,2))
plot(validate_res)
summary(storms_update2$tropicalstorm_force_diameter ~ storms_update2$Tropical_Storms)
table(storms_update2$tropicalstorm_force_diameter ~ storms_update2$Tropical_Storms)
table(storms_update2$tropicalstorm_force_diameter,storms_update2$Tropical_Storms)
Storm_Regions<-table(storms_update2$tropicalstorm_force_diameter,storms_update2$Tropical_Storms)
summary(Storm_Regions)
Storm_Regions
mean(Storm_Regions)
Storm_Regions<-table(storms_update2$tropicalstorm_force_diameter,storms_update2$Tropical_Storms)
Storm_Regions
Storm_Regions<-table(storms_update2$tropicalstorm_force_diameter,storms_update2$Tropical_Storms)
# Assuming `Storm_Regions` is already your table from the code
# Convert the table into a data frame
storm_df <- as.data.frame(Storm_Regions)
# Rename columns for better readability
colnames(storm_df) <- c("Force_Diameter", "Storm_Type", "Count")
# Filter out rows with zero counts to make statistics relevant
storm_df <- storm_df[storm_df$Count > 0, ]
# Calculate summary statistics for each storm type
library(dplyr)
summary_stats <- storm_df %>%
group_by(Storm_Type) %>%
summarise(
Total_Count = sum(Count),
Mean_Diameter = weighted.mean(Force_Diameter, Count),
Median_Diameter = median(rep(Force_Diameter, Count)),
Max_Diameter = max(Force_Diameter),
Variance_Diameter = sum((Force_Diameter - weighted.mean(Force_Diameter, Count))^2 * Count) / Total_Count
)
Storm_Regions<-table(storms_update2$tropicalstorm_force_diameter,storms_update2$Tropical_Storms)
# Convert the table into a data frame
storm_df <- as.data.frame(Storm_Regions)
# Rename columns for better readability
colnames(storm_df) <- c("Force_Diameter", "Storm_Type", "Count")
# Filter out rows with zero counts and ensure numeric types
storm_df <- storm_df[storm_df$Count > 0, ]
storm_df$Force_Diameter <- as.numeric(as.character(storm_df$Force_Diameter))
# Check for NAs (if there are still non-finite values)
if(any(is.na(storm_df$Force_Diameter))) {
storm_df <- storm_df[!is.na(storm_df$Force_Diameter), ]
}
# Calculate summary statistics for each storm type
library(dplyr)
summary_stats <- storm_df %>%
group_by(Storm_Type) %>%
summarise(
Total_Count = sum(Count),
Mean_Diameter = weighted.mean(Force_Diameter, Count),
Median_Diameter = weighted.median(Force_Diameter, Count, w = Count),
Max_Diameter = max(Force_Diameter),
Variance_Diameter = sum((Force_Diameter - weighted.mean(Force_Diameter, Count))^2 * Count) / Total_Count
)
install.packages("Hmisc")
library(Hmisc)
Storm_Regions<-table(storms_update2$tropicalstorm_force_diameter,storms_update2$Tropical_Storms)
# Convert the table into a data frame
storm_df <- as.data.frame(Storm_Regions)
# Rename columns for better readability
colnames(storm_df) <- c("Force_Diameter", "Storm_Type", "Count")
# Filter out rows with zero counts and ensure numeric types
storm_df <- storm_df[storm_df$Count > 0, ]
storm_df$Force_Diameter <- as.numeric(as.character(storm_df$Force_Diameter))
# Check for NAs (if there are still non-finite values)
if(any(is.na(storm_df$Force_Diameter))) {
storm_df <- storm_df[!is.na(storm_df$Force_Diameter), ]
}
# Calculate summary statistics for each storm type
library(dplyr)
summary_stats <- storm_df %>%
group_by(Storm_Type) %>%
summarise(
Total_Count = sum(Count),
Mean_Diameter = weighted.mean(Force_Diameter, Count),
Median_Diameter = weighted.median(Force_Diameter, Count, w = Count),
Max_Diameter = max(Force_Diameter),
Variance_Diameter = sum((Force_Diameter - weighted.mean(Force_Diameter, Count))^2 * Count) / Total_Count
)
library(Hmisc)
Storm_Regions<-table(storms_update2$tropicalstorm_force_diameter,storms_update2$Tropical_Storms)
# Convert the table into a data frame
storm_df <- as.data.frame(Storm_Regions)
# Rename columns for better readability
colnames(storm_df) <- c("Force_Diameter", "Storm_Type", "Count")
# Filter out rows with zero counts and ensure numeric types
storm_df <- storm_df[storm_df$Count > 0, ]
storm_df$Force_Diameter <- as.numeric(as.character(storm_df$Force_Diameter))
# Check for NAs (if there are still non-finite values)
if(any(is.na(storm_df$Force_Diameter))) {
storm_df <- storm_df[!is.na(storm_df$Force_Diameter), ]
}
summary_stats <- storm_df %>%
group_by(Storm_Type) %>%
summarise(
Total_Count = sum(Count),
Mean_Diameter = weighted.mean(Force_Diameter, Count),
# Calculate weighted median using quantile()
Median_Diameter = quantile(Force_Diameter[order(Force_Diameter)], probs = 0.5, names = FALSE)[order(Force_Diameter)][(length(Force_Diameter) + 1)%/"2"],
Storm_Regions<-table(storms_update2$tropicalstorm_force_diameter,storms_update2$Tropical_Storms)
# Convert the table into a data frame
storm_df <- as.data.frame(Storm_Regions)
# Rename columns for better readability
colnames(storm_df) <- c("Force_Diameter", "Storm_Type", "Count")
# Filter out rows with zero counts and ensure numeric types
storm_df <- storm_df[storm_df$Count > 0, ]
storm_df$Force_Diameter <- as.numeric(as.character(storm_df$Force_Diameter))
# Check for NAs (if there are still non-finite values)
if(any(is.na(storm_df$Force_Diameter))) {
storm_df <- storm_df[!is.na(storm_df$Force_Diameter), ]
}
summary_stats <- storm_df %>%
group_by(Storm_Type) %>%
summarise(
Total_Count = sum(Count),
Mean_Diameter = weighted.mean(Force_Diameter, Count),
# Use quantile() to calculate weighted median
Median_Diameter = quantile(Force_Diameter * Count, probs = 0.5, names = FALSE)[which.min(abs(quantile(Force_Diameter * Count, probs = 0.5, names = FALSE) - Force_Diameter * Count))],
Max_Diameter = max(Force_Diameter),
Variance_Diameter = sum((Force_Diameter - weighted.mean(Force_Diameter, Count))^2 * Count) / Total_Count
)
# View the summary statistics
print(summary_stats)
Storm_Regions<-table(storms_update2$tropicalstorm_force_diameter,storms_update2$Tropical_Storms)
# Convert the table into a data frame
storm_df <- as.data.frame(Storm_Regions)
storm_df
Storm_Regions<-table(storms_update2$tropicalstorm_force_diameter,storms_update2$Tropical_Storms)
Storm_Regions
# Convert the table into a data frame
storm_df <- as.data.frame(Storm_Regions)
# Rename columns for better readability
colnames(storm_df) <- c("Force_Diameter", "Storm_Type", "Count")
colnames(storm_df)
storm_df <- storm_df[storm_df$Count > 0, ]
storm_df$Force_Diameter <- as.numeric(as.character(storm_df$Force_Diameter))
# Check for NAs (if there are still non-finite values)
if(any(is.na(storm_df$Force_Diameter))) {
storm_df <- storm_df[!is.na(storm_df$Force_Diameter), ]
}
library(Hmisc)
Storm_Regions<-table(storms_update2$tropicalstorm_force_diameter,storms_update2$Tropical_Storms)
# Convert the table into a data frame
storm_df <- as.data.frame(Storm_Regions)
# Rename columns for better readability
colnames(storm_df) <- c("Force_Diameter", "Storm_Type", "Count")
# Filter out rows with zero counts and ensure numeric types
storm_df <- storm_df[storm_df$Count > 0, ]
storm_df$Force_Diameter <- as.numeric(as.character(storm_df$Force_Diameter))
summary_stats <- storm_df %>%
group_by(Storm_Type) %>%
summarise(
Total_Count = sum(Count),
Mean_Diameter = weighted.mean(Force_Diameter, Count),
# Use quantile() to calculate weighted median
Median_Diameter = quantile(Force_Diameter * Count, probs = 0.5, names = FALSE)[which.min(abs(quantile(Force_Diameter * Count, probs = 0.5, names = FALSE) - Force_Diameter * Count))],
Max_Diameter = max(Force_Diameter),
Variance_Diameter = sum((Force_Diameter - weighted.mean(Force_Diameter, Count))^2 * Count) / Total_Count
)
# View the summary statistics
print(summary_stats)
boxplot(storms_update2$tropicalstorm_force_diameter ~ storms_update2$Tropical_Storms
, data = storms_update2,
ylab = "tropicalstorm_force_diameter", xlab = "Tropical_Storms")
library(Hmisc)
Storm_Regions<-table(storms_update2$tropicalstorm_force_diameter,storms_update2$Tropical_Storms)
# Convert the table into a data frame
storm_df <- as.data.frame(Storm_Regions)
# Rename columns for better readability
colnames(storm_df) <- c("Force_Diameter", "Storm_Type", "Count")
# Filter out rows with zero counts and ensure numeric types
storm_df <- storm_df[storm_df$Count > 0, ]
storm_df$Force_Diameter <- as.numeric(as.character(storm_df$Force_Diameter))
summary_stats <- storm_df %>%
group_by(Storm_Type) %>%
summarise(
Total_Count = sum(Count),
Mean_Diameter = weighted.mean(Force_Diameter, Count),
Max_Diameter = max(Force_Diameter),
Variance_Diameter = sum((Force_Diameter - weighted.mean(Force_Diameter, Count))^2 * Count) / Total_Count
)
# View the summary statistics
print(summary_stats)
boxplot(storms_update2$tropicalstorm_force_diameter ~ storms_update2$Tropical_Storms
, data = storms_update2,
ylab = "tropicalstorm_force_diameter", xlab = "Tropical_Storms")
library(Hmisc)
Storm_Regions<-table(storms_update2$tropicalstorm_force_diameter,storms_update2$Tropical_Storms)
# Convert the table into a data frame
storm_df <- as.data.frame(Storm_Regions)
# Rename columns for better readability
colnames(storm_df) <- c("Force_Diameter", "Storm_Type", "Count")
# Filter out rows with zero counts and ensure numeric types
storm_df <- storm_df[storm_df$Count > 0, ]
storm_df$Force_Diameter <- as.numeric(as.character(storm_df$Force_Diameter))
summary_stats <- storm_df %>%
group_by(Storm_Type) %>%
summarise(
Total_Count = sum(Count),
Mean_Diameter = weighted.mean(Force_Diameter, Count),
)
# View the summary statistics
print(summary_stats)
boxplot(storms_update2$tropicalstorm_force_diameter ~ storms_update2$Tropical_Storms
, data = storms_update2,
ylab = "tropicalstorm_force_diameter", xlab = "Tropical_Storms")
storm_df
Storm_Regions<-table(storms_update2$tropicalstorm_force_diameter,storms_update2$Tropical_Storms)
Storm_Regions
storm_df <- storm_df[storm_df$Count > 0, ]
storm_df
storm_df$Force_Diameter <- as.numeric(as.character(storm_df$Force_Diameter))
Force_Diameter
storm_df$Force_Diameter
library(Hmisc)
Storm_Regions<-table(storms_update2$tropicalstorm_force_diameter,storms_update2$Tropical_Storms)
# Convert the table into a data frame
storm_df <- as.data.frame(Storm_Regions)
# Rename columns for better readability
colnames(storm_df) <- c("Force_Diameter", "Storm_Type", "Count")
# Filter out rows with zero counts and ensure numeric types
storm_df <- storm_df[storm_df$Count > 0, ]
storm_df$Force_Diameter <- as.numeric(as.character(storm_df$Force_Diameter))
summary_stats <- storm_df %>%
group_by(Storm_Type) %>%
summarise(
Total_Count = sum(Count),
Mean_Diameter = weighted.mean(Force_Diameter, Count),
)
# View the summary statistics
print(summary_stats)
boxplot(storms_update2$tropicalstorm_force_diameter ~ storms_update2$Tropical_Storms
, data = storms_update2,
ylab = "tropicalstorm_force_diameter", xlab = "Tropical_Storms")
#get the summary stats of the ANOVA test
summary(aov(storms_update2$tropicalstorm_force_diameter ~ storms_update2$Tropical_Storms))
means = with(storms_update2, tapply(tropicalstorm_force_diameter, Tropical_Storms, mean))
sds = with(storms_update2, tapply(tropicalstorm_force_diameter, Tropical_Storms, sd))
ns = with(storms_update2, tapply(tropicalstorm_force_diameter, Tropical_Storms, length))
pvcsummary = data.frame(n = ns, mean = means, sd = sds)
pvcsummary
knitr::opts_chunk$set(echo = TRUE)
str(iris)
str(PlantGrowth)
# Data Wrangling libraries
library(tidyverse)
library(dplyr)
head(PlantGrowth)
# Load the dataset
PlantGrowth
str(PlantGrowth) #This is an R inbuilt dataset
ggplot(PlantGrowth, aes(x = group, y = weight))+
geom_boxplot()
ggplot(PlantGrowth, aes(x = group, y = weight))+
geom_boxplot()+
labs(title = "Distribution of plant weight ",
x = "Treatment Groups",
y = "Plant Weight")
summary(aov(PlantGrowth$weight~PlantGrowth$group))
qf(0.95, df1 = 2, df2 = 27)  # 0.95 = 1 - alpha
qf(0.99, df1 = 2, df2 = 27)  # 0.95 = 1 - alpha
summary(aov(PlantGrowth$weight~PlantGrowth$group))
qf(0.95, df1 = 2, df2 = 27)  # 0.95 = 1 - alpha
qf(0.99, df1 = 2, df2 = 27)  # 0.95 = 1 - alpha
install.packages("blogdown")
knitr::opts_chunk$set(echo = TRUE)
library(blogdown)
git init
git init
setwd("F:/Tutoring2025/Random")
git init
git init
